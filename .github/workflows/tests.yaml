name: Tests
on:
  push:
    branches:
      - master
      - main
      - "release/*"
  pull_request:
jobs:
  integration:
    name: Integrations
    runs-on: 'ubuntu-20.04'
    strategy:
      matrix:
        FEATURES: [ oss ,enterprise ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '~1.20.3'
          check-latest: true
      - run: go version
      - run: go mod download # Not required, used to segregate module download vs test times

      - name: Integration test for enterprise
        if: matrix.FEATURES == 'enterprise'
        run: go test -v ./integration_test/docker_test/docker_test.go -count 1
        env:
          ENTERPRISE_TOKEN: ${{ secrets.ENTERPRISE_TOKEN }}

      - name: Integration test for oss
        if: matrix.FEATURES == 'oss'
        run: go test -v ./integration_test/docker_test/docker_test.go -count 1
        env:
          RSERVER_ENABLE_MULTITENANCY: ${{ matrix.MULTITENANCY }}

  warehouse-integration:
    name: Warehouse Service Integration
    runs-on: 'ubuntu-20.04'
    strategy:
      fail-fast: false
      matrix:
        destination: [ bigquery, clickhouse, datalake, deltalake, deltalake-native, mssql, azure-synapse, postgres, postgres-legacy, redshift, snowflake ]
        include:
          - destination: bigquery
            package: warehouse/integrations/bigquery
            bigqueryTestCredentials : ${{ secrets.BIGQUERY_INTEGRATION_TEST_CREDENTIALS }}
          - destination: clickhouse
            package: warehouse/integrations/clickhouse
          - destination: datalake
            package: warehouse/integrations/datalake
          - destination: deltalake
            package: warehouse/integrations/deltalake-native
            useNative: false
            deltalakeTestCredentials : ${{ secrets.DATABRICKS_INTEGRATION_TEST_CREDENTIALS }}
          - destination: deltalake-native
            package: warehouse/integrations/deltalake-native
            useNative: true
          - destination: mssql
            package: warehouse/integrations/mssql
          - destination: azure-synapse
            package: warehouse/integrations/azure-synapse
          - destination: postgres
            package: warehouse/integrations/postgres
            useLegacy: false
          - destination: postgres-legacy
            package: warehouse/integrations/postgres
            useLegacy: true
          - destination: redshift
            package: warehouse/integrations/redshift
            redshiftTestCredentials : ${{ secrets.REDSHIFT_INTEGRATION_TEST_CREDENTIALS }}
          - destination: snowflake
            package: warehouse/integrations/snowflake
            snowflakeTestCredentials : ${{ secrets.SNOWFLAKE_INTEGRATION_TEST_CREDENTIALS }}
            snowflakeRBACTestCredentials : ${{ secrets.SNOWFLAKE_RBAC_INTEGRATION_TEST_CREDENTIALS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '~1.20.3'
          check-latest: true
      - run: go version
      - run: go mod download # Not required, used to segregate module download vs test times
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: rudderlabs
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Warehouse Service Integration [ ${{ matrix.destination }} ]
        run: SLOW=1 go test -v ./${{ matrix.package }}/... -p 8 -timeout 30m -count 1 -run 'TestIntegration'
        env:
          BIGQUERY_INTEGRATION_TEST_CREDENTIALS: ${{ matrix.bigqueryTestCredentials }}
          DATABRICKS_INTEGRATION_TEST_CREDENTIALS: ${{ matrix.deltalakeTestCredentials }}
          REDSHIFT_INTEGRATION_TEST_CREDENTIALS: ${{ matrix.redshiftTestCredentials }}
          SNOWFLAKE_INTEGRATION_TEST_CREDENTIALS: ${{ matrix.snowflakeTestCredentials }}
          SNOWFLAKE_RBAC_INTEGRATION_TEST_CREDENTIALS: ${{ matrix.snowflakeRBACTestCredentials }}
          RSERVER_WAREHOUSE_POSTGRES_USE_LEGACY: ${{ matrix.useLegacy }}
          RSERVER_WAREHOUSE_DELTALAKE_USE_NATIVE: ${{ matrix.useNative }}

  unit:
    name: Unit
    runs-on: 'ubuntu-20.04'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '~1.20.3'
          check-latest: true

      - run: go version
      - run: go mod download # Not required, used to segregate module download vs test times
      - env:
          TEST_KAFKA_CONFLUENT_CLOUD_HOST: ${{ secrets.TEST_KAFKA_CONFLUENT_CLOUD_HOST }}
          TEST_KAFKA_CONFLUENT_CLOUD_KEY: ${{ secrets.TEST_KAFKA_CONFLUENT_CLOUD_KEY }}
          TEST_KAFKA_CONFLUENT_CLOUD_SECRET: ${{ secrets.TEST_KAFKA_CONFLUENT_CLOUD_SECRET }}
          TEST_KAFKA_AZURE_EVENT_HUBS_CLOUD_HOST: ${{ secrets.TEST_KAFKA_AZURE_EVENT_HUBS_CLOUD_HOST }}
          TEST_KAFKA_AZURE_EVENT_HUBS_CLOUD_EVENTHUB_NAME: ${{ secrets.TEST_KAFKA_AZURE_EVENT_HUBS_CLOUD_EVENTHUB_NAME }}
          TEST_KAFKA_AZURE_EVENT_HUBS_CLOUD_CONNECTION_STRING: ${{ secrets.TEST_KAFKA_AZURE_EVENT_HUBS_CLOUD_CONNECTION_STRING }}
          TEST_S3_DATALAKE_CREDENTIALS: ${{ secrets.TEST_S3_DATALAKE_CREDENTIALS }}
          BIGQUERY_INTEGRATION_TEST_CREDENTIALS: ${{ secrets.BIGQUERY_INTEGRATION_TEST_CREDENTIALS }}
        run: make test
      - uses: codecov/codecov-action@v2
