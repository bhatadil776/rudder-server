// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/router/batchrouter/asyncdestinationmanager/marketo-bulk-upload (interfaces: MarketoTransformerCall)

// Package mock_bulkservice is a generated GoMock package.
package mock_bulkservice

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockMarketoTransformerCall is a mock of MarketoTransformerCall interface.
type MockMarketoTransformerCall struct {
	ctrl     *gomock.Controller
	recorder *MockMarketoTransformerCallMockRecorder
}

// MockMarketoTransformerCallMockRecorder is the mock recorder for MockMarketoTransformerCall.
type MockMarketoTransformerCallMockRecorder struct {
	mock *MockMarketoTransformerCall
}

// NewMockMarketoTransformerCall creates a new mock instance.
func NewMockMarketoTransformerCall(ctrl *gomock.Controller) *MockMarketoTransformerCall {
	mock := &MockMarketoTransformerCall{ctrl: ctrl}
	mock.recorder = &MockMarketoTransformerCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketoTransformerCall) EXPECT() *MockMarketoTransformerCallMockRecorder {
	return m.recorder
}

// HTTPCallWithRetryWithTimeout mocks base method.
func (m *MockMarketoTransformerCall) HTTPCallWithRetryWithTimeout(arg0 string, arg1 []byte, arg2 time.Duration) ([]byte, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPCallWithRetryWithTimeout", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// HTTPCallWithRetryWithTimeout indicates an expected call of HTTPCallWithRetryWithTimeout.
func (mr *MockMarketoTransformerCallMockRecorder) HTTPCallWithRetryWithTimeout(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPCallWithRetryWithTimeout", reflect.TypeOf((*MockMarketoTransformerCall)(nil).HTTPCallWithRetryWithTimeout), arg0, arg1, arg2)
}
